--- a/net/minecraft/entity/projectile/EntityFishHook.java
+++ b/net/minecraft/entity/projectile/EntityFishHook.java
@@ -5,6 +5,7 @@
 import net.minecraft.block.BlockLiquid;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
+import net.minecraft.client.Minecraft;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.MoverType;
 import net.minecraft.entity.item.EntityItem;
@@ -83,9 +84,20 @@
     }
 
     private void shoot()
-    {
-        float f = this.angler.prevRotationPitch + (this.angler.rotationPitch - this.angler.prevRotationPitch);
-        float f1 = this.angler.prevRotationYaw + (this.angler.rotationYaw - this.angler.prevRotationYaw);
+    {   	
+    	//VIVE USE CONTROLLER
+        int c = 1;
+        if (this.angler.getHeldItemMainhand().getItem() == Items.FISHING_ROD) c = 0;
+        float yaw = Minecraft.getMinecraft().roomScale.getControllerYaw_World(c);
+        float pitch = -Minecraft.getMinecraft().roomScale.getControllerPitch_World(c);
+        Vec3d aimSource = Minecraft.getMinecraft().roomScale.getControllerPos_World(c);
+        this.setLocationAndAngles(aimSource.xCoord, aimSource.yCoord, aimSource.zCoord, yaw, pitch);
+        float f = pitch;
+        float f1 = yaw;
+        //END VIVE
+    	
+//    	float f = this.angler.prevRotationPitch + (this.angler.rotationPitch - this.angler.prevRotationPitch);
+//      float f1 = this.angler.prevRotationYaw + (this.angler.rotationYaw - this.angler.prevRotationYaw);      
         float f2 = MathHelper.cos(-f1 * 0.017453292F - (float)Math.PI);
         float f3 = MathHelper.sin(-f1 * 0.017453292F - (float)Math.PI);
         float f4 = -MathHelper.cos(-f * 0.017453292F);
@@ -93,7 +105,9 @@
         double d0 = this.angler.prevPosX + (this.angler.posX - this.angler.prevPosX) - (double)f3 * 0.3D;
         double d1 = this.angler.prevPosY + (this.angler.posY - this.angler.prevPosY) + (double)this.angler.getEyeHeight();
         double d2 = this.angler.prevPosZ + (this.angler.posZ - this.angler.prevPosZ) - (double)f2 * 0.3D;
-        this.setLocationAndAngles(d0, d1, d2, f1, f);
+        
+       
+       // this.setLocationAndAngles(d0, d1, d2, f1, f);
         this.motionX = (double)(-f3);
         this.motionY = (double)MathHelper.clamp(-(f5 / f4), -5.0F, 5.0F);
         this.motionZ = (double)(-f2);
