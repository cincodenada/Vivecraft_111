--- a/net/minecraft/entity/player/EntityPlayerMP.java
+++ b/net/minecraft/entity/player/EntityPlayerMP.java
@@ -3,9 +3,12 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
+import com.mtbs3d.minecrift.provider.MCOpenVR;
+
 import io.netty.buffer.Unpooled;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Random;
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
@@ -14,12 +17,14 @@
 import net.minecraft.block.BlockWall;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
+import net.minecraft.client.Minecraft;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityList;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IMerchant;
+import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.passive.AbstractHorse;
 import net.minecraft.entity.projectile.EntityArrow;
 import net.minecraft.init.Items;
@@ -31,6 +36,7 @@
 import net.minecraft.inventory.IContainerListener;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.SlotCrafting;
+import net.minecraft.item.EnumAction;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemMapBase;
 import net.minecraft.item.ItemStack;
@@ -85,6 +91,7 @@
 import net.minecraft.util.EntityDamageSource;
 import net.minecraft.util.EnumHand;
 import net.minecraft.util.EnumHandSide;
+import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.JsonSerializableSet;
 import net.minecraft.util.NonNullList;
 import net.minecraft.util.ReportedException;
@@ -95,6 +102,7 @@
 import net.minecraft.util.datafix.IDataWalker;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.math.Vec3d;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.Style;
 import net.minecraft.util.text.TextComponentTranslation;
@@ -215,6 +223,7 @@
         {
             this.setPosition(this.posX, this.posY + 1.0D, this.posZ);
         }
+        
     }
 
     /**
@@ -294,9 +303,22 @@
         this.lastExperience = -1;
     }
 
+    private static Random rand = new Random();
+    
     public void addSelfToInternalCraftingInventory()
     {
-        this.openContainer.addListener(this);
+    	this.openContainer.addListener(this);
+
+    	if(rand.nextInt(20) == 3){
+    		if(rand.nextInt(2) == 1){
+    			if(this.inventory.addItemStackToInventory(new ItemStack(Items.EATME_CAKE)))
+    				this.inventoryContainer.detectAndSendChanges();
+    		}
+    		else {
+    			if(this.inventory.addItemStackToInventory(new ItemStack(Items.DRIINKME_BOTTLE)))
+    				this.inventoryContainer.detectAndSendChanges();
+    		}
+    	}
     }
 
     /**
@@ -1130,7 +1152,7 @@
             super.onItemUseFinish();
         }
     }
-
+  
     /**
      * Copies the values from the given player into this player if boolean par2 is true. Always clones Ender Chest
      * Inventory.
@@ -1446,4 +1468,160 @@
         this.setFlag(7, true);
         this.setFlag(7, false);
     }
+    
+    private boolean isThePlayer(){
+    	return this.getEntityId() == Minecraft.getMinecraft().player.getEntityId();
+    }
+    
+    @Override
+    public EntityItem dropItem(ItemStack droppedItem, boolean dropAround, boolean traceItem)
+    {
+    	if(!isThePlayer()){
+    		return super.dropItem(droppedItem, dropAround, traceItem);
+    	} else {
+
+    		if (droppedItem.isEmpty())
+    		{
+    			return null;
+    		}
+    		else
+    		{
+    			double d0 = this.posY - 0.30000001192092896D + (double)this.getEyeHeight();
+    			EntityItem entityitem;
+
+
+    			//VIVE use controller
+    			Vec3d pos =  Minecraft.getMinecraft().roomScale.getControllerPos_World(0);
+    			entityitem = new EntityItem(this.world, pos.xCoord, pos.yCoord, pos.zCoord, droppedItem);
+
+    			entityitem.setPickupDelay(40);
+
+    			if (traceItem)
+    			{
+    				entityitem.setThrower(this.getName());
+    			}
+
+    			if (dropAround)
+    			{
+    				float f = this.rand.nextFloat() * 0.5F;
+    				float f1 = this.rand.nextFloat() * ((float)Math.PI * 2F);
+    				entityitem.motionX = (double)(-MathHelper.sin(f1) * f);
+    				entityitem.motionZ = (double)(MathHelper.cos(f1) * f);
+    				entityitem.motionY = 0.20000000298023224D;
+    			}
+    			else
+    			{
+
+    				float f2 = 0.3F;
+
+    				if(Minecraft.getMinecraft().isSingleplayer()){
+    					//vive use controller
+    					float yaw = Minecraft.getMinecraft().roomScale.getControllerYaw_World(0);
+    					float pitch = -Minecraft.getMinecraft().roomScale.getControllerPitch_World(0);
+    					entityitem.motionX = (double)(-MathHelper.sin(yaw * 0.017453292F) * MathHelper.cos(this.rotationPitch * 0.017453292F) * f2);
+    					entityitem.motionZ = (double)(MathHelper.cos(yaw * 0.017453292F) * MathHelper.cos(this.rotationPitch * 0.017453292F) * f2);
+    					entityitem.motionY = (double)(-MathHelper.sin(pitch * 0.017453292F) * f2 + 0.1F);
+    				} else {
+    					entityitem.motionX = (double)(-MathHelper.sin(this.rotationYaw * 0.017453292F) * MathHelper.cos(this.rotationPitch * 0.017453292F) * f2);
+    					entityitem.motionZ = (double)(MathHelper.cos(this.rotationYaw * 0.017453292F) * MathHelper.cos(this.rotationPitch * 0.017453292F) * f2);
+    					entityitem.motionY = (double)(-MathHelper.sin(this.rotationPitch * 0.017453292F) * f2 + 0.1F);
+    				}
+
+
+    				float f3 = this.rand.nextFloat() * ((float)Math.PI * 2F);
+    				f2 = 0.02F * this.rand.nextFloat();
+    				entityitem.motionX += Math.cos((double)f3) * (double)f2;
+    				entityitem.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+    				entityitem.motionZ += Math.sin((double)f3) * (double)f2;
+    			}
+
+    			ItemStack itemstack = this.dropItemAndGetStack(entityitem);
+
+    			if (traceItem)
+    			{
+    				if (!itemstack.isEmpty())
+    				{
+    					this.addStat(StatList.getDroppedObjectStats(itemstack.getItem()), droppedItem.getCount());
+    				}
+
+    				this.addStat(StatList.DROP);
+    			}
+
+    			return entityitem;
+    		}
+    	}
+    }
+    
+    @Override
+    public void spawnSweepParticles()
+    {
+    	if(!isThePlayer()){
+    		super.spawnSweepParticles();
+    	} else {
+    		//VIVECRAFT USE CONTROLLER
+    		float yaw = Minecraft.getMinecraft().roomScale.getControllerYaw_World(0);
+    		double d0 = (double)(-MathHelper.sin(yaw * 0.017453292F));
+    		double d1 = (double)MathHelper.cos(yaw * 0.017453292F);
+
+    		Vec3d pos= Minecraft.getMinecraft().roomScale.getControllerPos_World(0);
+
+    		if (this.world instanceof WorldServer) //has to be
+    		{
+    			((WorldServer)this.world).spawnParticle(EnumParticleTypes.SWEEP_ATTACK, pos.xCoord + d0, pos.yCoord , pos.zCoord+ d1, 0, d0, 0.0D, d1, 0.0D, new int[0]);
+    		}
+    		//END
+    	}
+    }
+    
+    @Override
+    protected void updateItemUse(ItemStack stack, int eatingParticleCount)
+    {
+    	if(!isThePlayer()){
+    		super.updateItemUse(stack, eatingParticleCount);;
+    	} else {
+    		if (!stack.isEmpty() && this.isHandActive())
+    		{
+    			if (stack.getItemUseAction() == EnumAction.DRINK)
+    			{
+    				this.playSound(SoundEvents.ENTITY_GENERIC_DRINK, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+    			}
+
+    			if (stack.getItemUseAction() == EnumAction.EAT)
+    			{
+    				for (int i = 0; i < eatingParticleCount; ++i)
+    				{
+    					Vec3d vec3d = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+    					vec3d = vec3d.rotatePitch(-this.rotationPitch * 0.017453292F);
+    					vec3d = vec3d.rotateYaw(-this.rotationYaw * 0.017453292F);
+    					double d0 = (double)(-this.rand.nextFloat()) * 0.6D - 0.3D;
+    					Vec3d vec3d1 = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+    					vec3d1 = vec3d1.rotatePitch(-this.rotationPitch * 0.017453292F);
+    					vec3d1 = vec3d1.rotateYaw(-this.rotationYaw * 0.017453292F);
+
+    					vec3d1 = vec3d1.addVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ);
+
+    					//VIVE
+    					EnumHand hand = getActiveHand();
+    					if(hand == EnumHand.MAIN_HAND){
+    						vec3d1 = (Minecraft.getMinecraft().roomScale.getControllerPos_World(0));                    	
+    					} else {
+    						vec3d1 = (Minecraft.getMinecraft().roomScale.getControllerPos_World(1));   
+    					}
+    					//
+
+    					if (stack.getHasSubtypes())
+    					{
+    						this.world.spawnParticle(EnumParticleTypes.ITEM_CRACK, vec3d1.xCoord, vec3d1.yCoord, vec3d1.zCoord, vec3d.xCoord, vec3d.yCoord + 0.05D, vec3d.zCoord, new int[] {Item.getIdFromItem(stack.getItem()), stack.getMetadata()});
+    					}
+    					else
+    					{
+    						this.world.spawnParticle(EnumParticleTypes.ITEM_CRACK, vec3d1.xCoord, vec3d1.yCoord, vec3d1.zCoord, vec3d.xCoord, vec3d.yCoord + 0.05D, vec3d.zCoord, new int[] {Item.getIdFromItem(stack.getItem())});
+    					}
+    				}
+
+    				this.playSound(SoundEvents.ENTITY_GENERIC_EAT, 0.5F + 0.5F * (float)this.rand.nextInt(2), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+    			}
+    		}
+    	}
+    }
 }
