--- a/net/minecraft/network/handshake/client/C00Handshake.java
+++ b/net/minecraft/network/handshake/client/C00Handshake.java
@@ -1,10 +1,12 @@
 package net.minecraft.network.handshake.client;
 
 import java.io.IOException;
+
 import net.minecraft.network.EnumConnectionState;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.handshake.INetHandlerHandshakeServer;
+import net.minecraft.src.Reflector;
 
 public class C00Handshake implements Packet<INetHandlerHandshakeServer>
 {
@@ -12,7 +14,7 @@
     private String ip;
     private int port;
     private EnumConnectionState requestedState;
-
+    private boolean hasFMLMarker = false;
     public C00Handshake()
     {
     }
@@ -24,7 +26,13 @@
         this.port = port;
         this.requestedState = requestedState;
     }
-
+    
+    public C00Handshake(int protocol, String address, int port, EnumConnectionState state, boolean addFMLMarker)
+    {
+    	this(protocol, address, port, state);
+    	this.hasFMLMarker = addFMLMarker;
+    }
+    
     /**
      * Reads the raw packet data from the data stream.
      */
@@ -34,6 +42,8 @@
         this.ip = buf.readString(255);
         this.port = buf.readUnsignedShort();
         this.requestedState = EnumConnectionState.getById(buf.readVarInt());
+        this.hasFMLMarker = this.ip.contains("\0FML\0");
+        this.ip = this.ip.split("\0")[0];
     }
 
     /**
@@ -42,7 +52,8 @@
     public void writePacketData(PacketBuffer buf) throws IOException
     {
         buf.writeVarInt(this.protocolVersion);
-        buf.writeString(this.ip);
+        if(!Reflector.forgeExists()) buf.writeString(this.ip);
+        else buf.writeString(this.ip + "\0FML\0");
         buf.writeShort(this.port);
         buf.writeVarInt(this.requestedState.getId());
     }
@@ -64,4 +75,8 @@
     {
         return this.protocolVersion;
     }
+    public boolean hasFMLMarker()
+    {
+    	return this.hasFMLMarker;
+    }
 }
