--- a/net/minecraft/client/entity/EntityPlayerSP.java
+++ b/net/minecraft/client/entity/EntityPlayerSP.java
@@ -1,7 +1,15 @@
 package net.minecraft.client.entity;
 
+import java.lang.reflect.Field;
 import java.util.List;
 import javax.annotation.Nullable;
+
+import com.mtbs3d.minecrift.api.IRoomscaleAdapter;
+import com.mtbs3d.minecrift.provider.OpenVRPlayer;
+import com.mtbs3d.minecrift.settings.VRSettings;
+import com.mtbs3d.minecrift.utils.Utils;
+
+import jopenvr.VR_IVRSystem_FnTable.GetEyeToHeadTransform_callback;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.audio.ElytraSound;
@@ -34,6 +42,7 @@
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.item.EntityMinecart;
 import net.minecraft.entity.passive.AbstractHorse;
+import net.minecraft.entity.passive.EntityHorse;
 import net.minecraft.init.Items;
 import net.minecraft.init.MobEffects;
 import net.minecraft.init.SoundEvents;
@@ -136,6 +145,21 @@
      */
     protected int sprintToggleTimer;
 
+    
+    // VIVE START - teleport movement
+    public int movementTeleportTimer;
+	public boolean initFromServer;
+	public float spEyeHeight;
+    // VIVE END - teleport movement
+    /** MINECRIFT **/
+    public float headPitch = 0;
+    public double additionX = 0;
+    public double additionZ = 0;
+    public double additionY = 0;
+    public final float PIOVER180 = (float)Math.PI / 180.0F;
+    /** END MINECRIFT **/
+    
+    
     /** Ticks left before sprinting is disabled. */
     public int sprintingTicksLeft;
     public float renderArmYaw;
@@ -164,8 +188,23 @@
         this.statWriter = statFile;
         this.mc = mcIn;
         this.dimension = 0;
+       
+        
     }
 
+    //VIVE
+    public void setItemInUseClient(ItemStack item){
+    	this.activeItemStack = item;
+    }
+    
+    
+    public void setItemInUseCountClient(int count){
+    	this.activeItemStackUseCount = count;
+    }
+    
+    //END VIVECRAFT
+    
+    
     /**
      * Called when the entity is attacked.
      */
@@ -205,11 +244,29 @@
         }
     }
 
+    private float startmountrotate;
+    
     public void dismountRidingEntity()
     {
         super.dismountRidingEntity();
         this.rowingBoat = false;
-    }
+        if(Minecraft.getMinecraft().vrSettings.vehicleRotation){
+        	mc.vrSettings.vrWorldRotation = startmountrotate;
+        	Minecraft.getMinecraft().vrPlayer.checkandUpdateRotateScale(false);
+        }
+    }
+    
+    @Override
+    public boolean startRiding(Entity entityIn) {
+    	if(super.startRiding(entityIn)){   	
+    		if (entityIn instanceof EntityBoat){
+    			entityIn.rotationYaw = 180 - Minecraft.getMinecraft().roomScale.getHMDYaw_World();
+    		}
+    		startmountrotate = Minecraft.getMinecraft().vrSettings.vrWorldRotation;
+    		return true;
+    	}
+    	return false;
+    };
 
     /**
      * interpolated look vector
@@ -283,6 +340,7 @@
             this.serverSneakState = flag1;
         }
 
+               
         if (this.isCurrentViewEntity())
         {
             AxisAlignedBB axisalignedbb = this.getEntityBoundingBox();
@@ -333,6 +391,11 @@
 
             this.prevOnGround = this.onGround;
             this.autoJumpEnabled = this.mc.gameSettings.autoJump;
+            
+            //VIVECRAFT
+            mc.vrPlayer.IAmLookingAtMyHand[0] = mc.vrPlayer.shouldIlookatMyHand[0];
+            mc.vrPlayer.IAmLookingAtMyHand[1] = mc.vrPlayer.shouldIlookatMyHand[1];
+            //END VIVECRAFT
         }
     }
 
@@ -1000,7 +1063,7 @@
                     this.sendPlayerAbilities();
                 }
             }
-            else if (!flag && this.movementInput.jump && !flag3)
+            else if (!flag &&   this.movementInput.jump && !flag3)
             {
                 if (this.flyToggleTimer == 0)
                 {
@@ -1088,6 +1151,11 @@
 
         super.onLivingUpdate();
 
+        // VIVE START - teleport movement
+        mc.vrPlayer.onLivingUpdate(this, this.mc, this.rand);
+        // VIVE END - teleport movement
+
+
         if (this.onGround && this.capabilities.isFlying && !this.mc.playerController.isSpectatorMode())
         {
             this.capabilities.isFlying = false;
@@ -1106,8 +1174,11 @@
         if (this.getRidingEntity() instanceof EntityBoat)
         {
             EntityBoat entityboat = (EntityBoat)this.getRidingEntity();
-            entityboat.updateInputs(this.movementInput.leftKeyDown, this.movementInput.rightKeyDown, this.movementInput.forwardKeyDown, this.movementInput.backKeyDown);
-            this.rowingBoat |= this.movementInput.leftKeyDown || this.movementInput.rightKeyDown || this.movementInput.forwardKeyDown || this.movementInput.backKeyDown;
+            entityboat.updateInputs(this.movementInput.leftKeyDown || (mc.rowTracker.LOar && !mc.rowTracker.Foar),
+            		this.movementInput.rightKeyDown||(mc.rowTracker.ROar&& !mc.rowTracker.Foar), 
+            		this.movementInput.forwardKeyDown || (mc.rowTracker.Foar),
+            		this.movementInput.backKeyDown);
+            this.rowingBoat |=  mc.rowTracker.LOar || mc.rowTracker.ROar || mc.rowTracker.Foar || this.movementInput.leftKeyDown || this.movementInput.rightKeyDown || this.movementInput.forwardKeyDown || this.movementInput.backKeyDown;
         }
     }
 
@@ -1138,10 +1209,46 @@
      */
     public void move(MoverType type, double x, double y, double z)
     {
-        double d0 = this.posX;
-        double d1 = this.posZ;
-        super.move(type, x, y, z);
-        this.updateAutoJump((float)(this.posX - d0), (float)(this.posZ - d1));
+    	if(x==0 && y==0 && z==0) return;
+    	if(this.isRiding())return;
+    	
+    	boolean client = this instanceof EntityPlayerSP;
+    	boolean freemove = OpenVRPlayer.get().getFreeMoveMode();
+    	boolean doY = freemove || (Minecraft.getMinecraft().vrSettings.simulateFalling && !this.isOnLadder()) && !this.isSneaking();
+    	if(mc.vrSettings.realisticClimbEnabled) doY = true;
+    	Vec3d roomOrigin = OpenVRPlayer.get().getRoomOriginPos_World();
+    	//   	Vec3 camloc = Minecraft.getMinecraft().roomScale.getHMDPos_World();
+
+    	if ( freemove && (this.moveForward != 0 || this.isElytraFlying() || Math.abs(this.motionX) > 0.01 || Math.abs(this.motionZ) > 0.01))
+    	{
+    		double ox = roomOrigin.xCoord - posX;
+    		double oz = roomOrigin.zCoord - posZ;
+    		double d0 = this.posX;
+    		double d1 = this.posZ;
+    		super.move(type,x,y,z);
+    		this.updateAutoJump((float)(this.posX - d0), (float)(this.posZ - d1));
+    		if (client){	
+    			double oy = this.posY;
+    			OpenVRPlayer.get().setRoomOrigin(
+    					posX + ox, 
+    					oy, 
+    					posZ  + oz, false, false);
+    		}
+    	} else {
+    		if(doY) {      	 
+    			super.move(type,0,y,0);
+    			if (client){
+    				OpenVRPlayer.get().setRoomOrigin(
+    						OpenVRPlayer.get().getRoomOriginPos_World().xCoord, 
+    						this.posY,
+    						OpenVRPlayer.get().getRoomOriginPos_World().zCoord, false, false);
+    			}
+
+    		} else {
+    			this.onGround = true; //
+    			//do not move player, VRPlayer.moveplayerinroom will move him around.
+    		}
+    	}
     }
 
     public boolean isAutoJumpEnabled()
@@ -1167,12 +1274,16 @@
                     float f = this.getAIMoveSpeed();
                     float f1 = (float)vec3d2.lengthSquared();
 
+                    //VIVE
+                    float yaw = Minecraft.getMinecraft().roomScale.getControllerYaw_World(0);
+                    //END VIVE
+                    
                     if (f1 <= 0.001F)
                     {
                         float f2 = f * vec2f.x;
                         float f3 = f * vec2f.y;
-                        float f4 = MathHelper.sin(this.rotationYaw * 0.017453292F);
-                        float f5 = MathHelper.cos(this.rotationYaw * 0.017453292F);
+                        float f4 = MathHelper.sin(yaw * 0.017453292F);
+                        float f5 = MathHelper.cos(yaw * 0.017453292F);
                         vec3d2 = new Vec3d((double)(f2 * f5 - f3 * f4), vec3d2.yCoord, (double)(f3 * f5 + f2 * f4));
                         f1 = (float)vec3d2.lengthSquared();
 
@@ -1292,4 +1403,230 @@
             }
         }
     }
+    
+    
+    // VIVECREAFT ADDITIONS
+    
+    
+    /**
+     * Sets the location and Yaw/Pitch of an entity in the world
+     */
+    @Override
+    public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch)
+    {
+    	 	
+//    	Vec3 roomOrigin = OpenVRPlayer.get().getRoomOriginPos_World();
+//    	double ox = roomOrigin.xCoord - posX;
+//    	double oz = roomOrigin.zCoord - posZ;
+//    	
+    	super.setLocationAndAngles(x, y, z, yaw, pitch);
+    	
+    	if(!initFromServer) return;
+    	else { //still init.
+            mc.vrPlayer.snapRoomOriginToPlayerEntity(this, true, false);
+            
+//    		OpenVRPlayer.get().setRoomOrigin(
+//    				posX + ox, 
+//    				this.boundingBox.minY, 
+//    				posZ  + oz, false);
+    	}
+    }
+    
+    @Override
+    public void setPositionAndRotation(double x, double y, double z, float yaw, float pitch)
+    {
+        super.setPositionAndRotation(x, y, z, yaw, pitch);
+		
+        OpenVRPlayer.get().snapRoomOriginToPlayerEntity(this, true, false);
+      
+		if(initFromServer == false){
+            initFromServer = true;    
+        }
+    }
+    
+    // VIVE START - update room origin when player entity is moved
+    @Override
+    public void setPosition(double x, double y, double z)
+    { //this is also called when riding to move this around.
+		super.setPosition(x, y, z);
+
+    	if(this.isRiding()){   			
+    		Vec3d roomOrigin = OpenVRPlayer.get().getRoomOriginPos_World();
+    		Vec3d me = OpenVRPlayer.get().getHMDPos_World();
+    		double ox = roomOrigin.xCoord - me.xCoord;
+    		double oy = roomOrigin.yCoord - me.yCoord;
+    		double oz = roomOrigin.zCoord - me.zCoord;
+    		
+    		OpenVRPlayer.get().setRoomOrigin(
+    				this.getRidingEntity().posX + ox, 
+    				this.getRidingEntity().posY + (this.getRidingEntity() instanceof EntityHorse ? this.getRidingEntity().getMountedYOffset() : 0 ),
+    				this.getRidingEntity().posZ + oz, false, false); 		    		
+    	} 
+    }
+        
+    
+    /** MINECRIFT **/
+    public void doDrag()
+    {
+
+    	float var3 = 0.91F;
+
+    	if (this.onGround)
+    	{
+    		var3 = this.world.getBlockState(new BlockPos(this.posX, this.getEntityBoundingBox().minY - 1.0D, this.posZ)).getBlock().slipperiness * 0.91F;
+    	}
+
+    	double xFactor = var3;
+    	double zFactor = var3;
+
+    	//VIVECRAFT account for stock drag code we can't change in EntityLivingBase
+    	this.motionX /= xFactor;
+    	this.motionZ /= zFactor;
+    	//
+
+    	int inertiaFactor = Minecraft.getMinecraft().vrSettings.inertiaFactor;
+    	double addFactor = VRSettings.getInertiaAddFactor(inertiaFactor);
+
+    	double boundedAdditionX = getBoundedAddition(additionX);
+    	double targetLimitX = (var3 * boundedAdditionX) / (1f - var3);
+    	double multiFactorX = targetLimitX / (var3 * (targetLimitX + (boundedAdditionX * addFactor)));
+    	xFactor *= multiFactorX;
+
+    	double boundedAdditionZ = getBoundedAddition(additionZ);
+    	double targetLimitZ = (var3 * boundedAdditionZ) / (1f - var3);
+    	double multiFactorZ = targetLimitZ / (var3 * (targetLimitZ + (boundedAdditionZ * addFactor)));
+    	zFactor *= multiFactorZ;
+
+
+    	this.motionX *= xFactor;
+    	this.motionZ *= zFactor;
+    }
+    
+    public double getBoundedAddition(double orig)
+    {
+        if (orig >= -1.0E-6D && orig <= 1.0E-6D) {
+            return 1.0E-6D;
+        }
+        else {
+            return orig;
+        }
+    }
+    
+    
+    /**
+     * Used in both water and by flying objects
+     */
+    @Override
+    public void moveRelative(float strafe, float forward, float friction)
+    {
+//   	super.moveFlying(strafe, forward, friction);;
+    	
+    	OpenVRPlayer vr = mc.vrPlayer;		
+    	if (!vr.getFreeMoveMode()) {return;}
+		
+        int inertiaFactor = Minecraft.getMinecraft().vrSettings.inertiaFactor;
+        float speed = strafe * strafe + forward * forward;
+
+        double mX = 0d;
+        double mZ = 0d;
+        double mY = 0d;
+        double addFactor = 1f;
+
+        if (speed >= 1.0E-4F)
+        {
+            speed = MathHelper.sqrt(speed);
+
+            if (speed < 1.0F)
+            {
+                speed = 1.0F;
+            }
+
+            speed = friction / speed;
+            strafe *= speed;
+            forward *= speed;
+
+            
+            Vec3d directionVec = new Vec3d(strafe, 0,forward);
+	  						
+         	//VIVE DO PITCH FLYING		
+
+    		IRoomscaleAdapter con = mc.roomScale;
+    		
+            // Account for pitch if required
+    		   	
+    		if(mc.vrSettings.seated){
+            	directionVec=directionVec.rotateYaw(-con.getControllerYaw_World(1) * PIOVER180);	    		
+    		}else{
+        		if(this.capabilities.isFlying || this.inWater){
+        			switch (mc.vrSettings.vrFreeMoveMode){
+        			case VRSettings.FREEMOVE_CONTROLLER:
+        				directionVec= directionVec.rotatePitch(con.getControllerPitch_World(1) * PIOVER180);		   
+        				break;
+        			case VRSettings.FREEMOVE_HMD:
+        				directionVec=directionVec.rotatePitch(con.getHMDPitch_World()* PIOVER180);				
+        				break;
+        			case VRSettings.FREEMOVE_RUNINPLACE:
+        				//hmd pitch
+        				directionVec=directionVec.rotatePitch(con.getHMDPitch_World()* PIOVER180);	
+        				break;
+        			}
+        		}
+        		
+    			switch (mc.vrSettings.vrFreeMoveMode){
+    			case VRSettings.FREEMOVE_CONTROLLER:
+                	directionVec=directionVec.rotateYaw(-con.getControllerYaw_World(1) * PIOVER180);	
+    				break;
+    			case VRSettings.FREEMOVE_HMD:
+                	directionVec=directionVec.rotateYaw(-con.getHMDYaw_World() * PIOVER180);	
+    				break;
+    			case VRSettings.FREEMOVE_RUNINPLACE:
+                	directionVec=directionVec.rotateYaw((float) (-mc.runTracker.getYaw() * PIOVER180));
+    				directionVec = directionVec.scale(mc.runTracker.getSpeed());
+    				break;
+    			}
+        		    	    			
+    		}
+    			
+
+
+            mX = directionVec.xCoord;
+            mY = directionVec.yCoord;
+            mZ = directionVec.zCoord;
+
+     	   // Modify acceleration sequence (each tick)
+            if(!this.capabilities.isFlying && !this.inWater) addFactor = VRSettings.getInertiaAddFactor(inertiaFactor);
+            
+            float yAdd = 1f;
+            if(this.capabilities.isFlying) yAdd = 3f; //HACK
+            
+            this.motionX = this.motionX + (mX * addFactor);
+            this.motionZ = this.motionZ + (mZ * addFactor);
+            this.motionY = this.motionY + (mY * yAdd);
+      
+            this.additionX = mX;
+            this.additionZ = mZ;
+        }
+        
+        //if (this instanceof EntityPlayerSP) {
+        //    System.out.println(String.format("FLYING: %B, forward: %.4f, strafe: %.4f, pitch: %.4f, yaw: %.4f, mx: %.4f, mz: %.4f, my: %.4f", allowYAdjust, forward, strafe, this.headPitch, this.rotationYaw, mX, mZ, mY));
+        //}
+
+        
+     if(!this.capabilities.isFlying && !this.inWater) doDrag();       //TODO put back intertia while flying.. doesnt work for some reason. 
+        
+/** END MINECRIFT **/
+   
+    }
+    
+    public float eyeHeightOverride = 0;
+    public boolean overrideEyeHeight;
+    
+    @Override
+    public float getEyeHeight(){
+    	if(overrideEyeHeight) return eyeHeightOverride;
+    	return super.getEyeHeight();
+    	
+    }
+    
+    
 }
