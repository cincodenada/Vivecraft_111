--- a/net/minecraft/client/gui/GuiScreen.java
+++ b/net/minecraft/client/gui/GuiScreen.java
@@ -3,6 +3,9 @@
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+import com.mtbs3d.minecrift.provider.MCOpenVR;
+import com.mtbs3d.minecrift.settings.VRSettings;
+
 import java.awt.Toolkit;
 import java.awt.datatransfer.ClipboardOwner;
 import java.awt.datatransfer.DataFlavor;
@@ -66,7 +69,7 @@
     public boolean allowUserInput;
 
     /** The FontRenderer used by GuiScreen */
-    protected FontRenderer fontRendererObj;
+    public FontRenderer fontRendererObj;
 
     /** The button that was just pressed. */
     private GuiButton selectedButton;
@@ -78,6 +81,7 @@
      */
     private int touchValue;
     private URI clickedLinkURI;
+	public static boolean pressShiftFake;
 
     /**
      * Draws the screen and all the components in it.
@@ -103,6 +107,10 @@
     {
         if (keyCode == 1)
         {
+            /** MINECRIFT */
+            // Escape pressed - save all
+            VRSettings.saveAll(this.mc);
+            /** END MINECRIFT */
             this.mc.displayGuiScreen((GuiScreen)null);
 
             if (this.mc.currentScreen == null)
@@ -111,6 +119,10 @@
             }
         }
     }
+    
+    public void keyTypedPublic(char typedChar, int keyCode) throws IOException {
+    	keyTyped(typedChar, keyCode);
+    }
 
     protected <T extends GuiButton> T addButton(T p_189646_1_)
     {
@@ -558,7 +570,18 @@
         {
             while (Mouse.next())
             {
+            	if (mc.stereoProvider.isStereo()){
+            		if(!MCOpenVR.controllerMouseValid){
+            			MCOpenVR.controllerMouseValid = true;
+            			MCOpenVR.controllerMouseTicks = 20;
+				}}
+            	
                 this.handleMouseInput();
+                
+            	if(mc.currentScreen == null){
+            		int a = 9;
+            	}
+            	
             }
         }
 
@@ -580,6 +603,15 @@
         int j = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
         int k = Mouse.getEventButton();
 
+		/** MINECRIFT */
+    	if (mc.stereoProvider.isStereo()){
+    		if(!MCOpenVR.controllerMouseValid){
+				if (mc.mouseHelper.deltaX > 0 || mc.mouseHelper.deltaY> 0 )
+        			MCOpenVR.controllerMouseValid = true;
+				}
+			}  	      
+		/** END MINECRIFT */
+        
         if (Mouse.getEventButtonState())
         {
             if (this.mc.gameSettings.touchscreen && this.touchValue++ > 0)
@@ -613,13 +645,20 @@
      */
     public void handleKeyboardInput() throws IOException
     {
-        char c0 = Keyboard.getEventCharacter();
+        if(Keyboard.getEventKey()==1 && MCOpenVR.keyboardShowing){
+        	MCOpenVR.setKeyboardOverlayShowing(false, null);
+        	return;
+        }
+        
+    	char c0 = Keyboard.getEventCharacter();
 
         if (Keyboard.getEventKey() == 0 && c0 >= 32 || Keyboard.getEventKeyState())
         {
             this.keyTyped(c0, Keyboard.getEventKey());
         }
 
+
+        
         this.mc.dispatchKeypresses();
     }
 
@@ -649,7 +688,16 @@
     {
         if (this.mc.world != null)
         {
-            this.drawGradientRect(0, 0, this.width, this.height, -1072689136, -804253680);
+            /** MINECRIFT */
+            if (this.mc.vrSettings != null && this.mc.vrSettings.menuBackground == false)
+            {
+                this.drawGradientRect(0, 0, this.width, this.height, 0, 0);
+            }
+            else
+            {
+                this.drawGradientRect(0, 0, this.width, this.height, -1072689136, -804253680);
+            }
+    		/** END MINECRIFT */
         }
         else
         {
@@ -727,7 +775,7 @@
      */
     public static boolean isShiftKeyDown()
     {
-        return Keyboard.isKeyDown(42) || Keyboard.isKeyDown(54);
+        return Keyboard.isKeyDown(42) || Keyboard.isKeyDown(54) || pressShiftFake;
     }
 
     /**
@@ -765,4 +813,75 @@
     {
         this.setWorldAndResolution(mcIn, w, h);
     }
+    
+    /** MINECRIFT ADDITIONS BELOW */
+	public static boolean mouseDown;
+    public void mouseDown( int rawX, int rawY, int button )
+    {
+        int var1 = rawX * this.width / this.mc.displayWidth;
+        int var2 = this.height - rawY * this.height / this.mc.displayHeight - 1;
+        this.eventButton = button;
+        this.lastMouseEvent = Minecraft.getSystemTime();
+        try {
+			mouseClicked(var1, var2, button);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    	mouseDown = true;
+    }
+    
+    public void mouseUp( int rawX, int rawY, int button )
+    {
+    	mouseDown = false;
+        int var1 = rawX * this.width / this.mc.displayWidth;
+        int var2 = this.height - rawY * this.height / this.mc.displayHeight - 1;
+        mouseReleased(var1, var2, button);
+    }
+    
+    public void mouseDrag( int rawX, int rawY )
+    {
+        int var1 = rawX * this.width / this.mc.displayWidth;
+        int var2 = this.height - rawY * this.height / this.mc.displayHeight - 1;
+        long var3 = Minecraft.getSystemTime() - this.lastMouseEvent;
+        this.mouseClickMove(var1, var2, this.eventButton, var3);
+    }
+
+    public void mouseGuiDown( int guiX, int guiY, int button )
+    {
+        this.eventButton = button;
+        this.lastMouseEvent = Minecraft.getSystemTime();
+        try {
+			mouseClicked(guiX, guiY, button);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+    
+    public void mouseGuiUp( int guiX, int guiY, int button )
+    {
+    	mouseDown = false;
+        mouseReleased(guiX, guiY, button);
+    }
+    
+    public void mouseGuiDrag( int guiX, int guiY )
+    {
+        long var3 = Minecraft.getSystemTime() - this.lastMouseEvent;
+        this.mouseClickMove(guiX, guiY, this.eventButton, var3);
+    }
+
+    public int getMouseX()
+    {
+        int mX = Mouse.getX() * this.mc.currentScreen.width / this.mc.displayWidth;
+        return mX;
+    }
+
+    public int getMouseY()
+    {
+        int mY = this.mc.currentScreen.height - Mouse.getY() * this.mc.currentScreen.height / this.mc.displayHeight - 1;
+        return mY;
+    }
+
+    
 }
