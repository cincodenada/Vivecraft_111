--- a/net/minecraft/client/shader/Framebuffer.java
+++ b/net/minecraft/client/shader/Framebuffer.java
@@ -1,6 +1,11 @@
 package net.minecraft.client.shader;
 
+import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL30;
+
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.Tessellator;
@@ -10,7 +15,8 @@
 
 public class Framebuffer
 {
-    public int framebufferTextureWidth;
+    private static final int NO_TEXTURE_ID = -1;
+	public int framebufferTextureWidth;
     public int framebufferTextureHeight;
     public int framebufferWidth;
     public int framebufferHeight;
@@ -20,6 +26,9 @@
     public int depthBuffer;
     public float[] framebufferColor;
     public int framebufferFilter;
+	private boolean generatedFramebufferTexture;
+	private boolean genMipMaps;
+	private String name;
 
     public Framebuffer(int width, int height, boolean useDepthIn)
     {
@@ -32,10 +41,43 @@
         this.framebufferColor[1] = 1.0F;
         this.framebufferColor[2] = 1.0F;
         this.framebufferColor[3] = 0.0F;
-        this.createBindFramebuffer(width, height);
+        this.createBindFramebuffer(width, height, NO_TEXTURE_ID);
+    }
+    
+    public Framebuffer(String name, int width, int height, boolean useDepth, boolean generateMipMaps)
+    {
+        this(name, width, height, useDepth, generateMipMaps, false, 0,-1);
+    }
+
+    
+    public Framebuffer(String name, int width, int height, boolean useDepth, boolean generateMipMaps, boolean multisample, int multisamplecount, int textureID)
+    {
+    	this.name = name;
+        this.useDepth = useDepth;
+        this.framebufferObject = -1;       
+        this.framebufferTexture = NO_TEXTURE_ID;
+        this.generatedFramebufferTexture = true;
+        this.depthBuffer = -1;
+        this.framebufferColor = new float[4];
+        this.framebufferColor[0] = 1.0F;
+        this.framebufferColor[1] = 1.0F;
+        this.framebufferColor[2] = 1.0F;
+        this.framebufferColor[3] = 0.0F;
+        this.genMipMaps = generateMipMaps;
+//        this.multiSample = multisample;
+//        if (this.multiSample) {
+//            this.multiSampleCount = multisamplecount;
+//            this.textureType = GL32.GL_TEXTURE_2D_MULTISAMPLE;
+//        }
+
+        this.createBindFramebuffer(width, height, textureID);
     }
 
-    public void createBindFramebuffer(int width, int height)
+    public void createBindFramebuffer(int width, int height){
+    	this.createBindFramebuffer(-width, height, -1);
+    }
+    
+    public void createBindFramebuffer(int width, int height, int textureId)
     {
         if (!OpenGlHelper.isFramebufferEnabled())
         {
@@ -51,7 +93,7 @@
                 this.deleteFramebuffer();
             }
 
-            this.createFramebuffer(width, height);
+            this.createFramebuffer(width, height, textureId);
             this.checkFramebufferComplete();
             OpenGlHelper.glBindFramebuffer(OpenGlHelper.GL_FRAMEBUFFER, 0);
         }
@@ -85,7 +127,7 @@
         }
     }
 
-    public void createFramebuffer(int width, int height)
+    public void createFramebuffer(int width, int height, int textureId)
     {
         this.framebufferWidth = width;
         this.framebufferHeight = height;
@@ -99,13 +141,31 @@
         else
         {
             this.framebufferObject = OpenGlHelper.glGenFramebuffers();
-            this.framebufferTexture = TextureUtil.glGenTextures();
+            
+            if (textureId == NO_TEXTURE_ID) {
+                // generate texture
+                this.framebufferTexture = TextureUtil.glGenTextures();
+                this.generatedFramebufferTexture = true;
+            }
+            else {
+                // Use supplied texture ID
+                this.framebufferTexture = textureId;
+                this.generatedFramebufferTexture = false;
+            }
+            
+            
 
             if (this.useDepth)
             {
-                this.depthBuffer = OpenGlHelper.glGenRenderbuffers();
+                this.depthBuffer = TextureUtil.glGenTextures();     // GL30.glGenRenderbuffers()
             }
 
+            if (this.genMipMaps) {
+                // Allocate mip map storage
+                genMipMaps();                // TODO: Check GLContext capabilities
+            }
+
+            
             this.setFramebufferFilter(9728);
             GlStateManager.bindTexture(this.framebufferTexture);
             GlStateManager.glTexImage2D(3553, 0, 32856, this.framebufferTextureWidth, this.framebufferTextureHeight, 0, 6408, 5121, (IntBuffer)null);
@@ -114,9 +174,14 @@
 
             if (this.useDepth)
             {
-                OpenGlHelper.glBindRenderbuffer(OpenGlHelper.GL_RENDERBUFFER, this.depthBuffer);
-                OpenGlHelper.glRenderbufferStorage(OpenGlHelper.GL_RENDERBUFFER, 33190, this.framebufferTextureWidth, this.framebufferTextureHeight);
-                OpenGlHelper.glFramebufferRenderbuffer(OpenGlHelper.GL_FRAMEBUFFER, OpenGlHelper.GL_DEPTH_ATTACHMENT, OpenGlHelper.GL_RENDERBUFFER, this.depthBuffer);
+            	GL11.glBindTexture((int)3553, this.depthBuffer );
+				GL11.glTexParameteri((int)3553, (int)10242, (int)10496);
+				GL11.glTexParameteri((int)3553, (int)10243, (int)10496);
+				GL11.glTexParameteri((int)3553, (int)10241, (int)9728);
+				GL11.glTexParameteri((int)3553, (int)10240, (int)9728);
+				GL11.glTexParameteri((int)3553, (int)34891, (int)6409);
+        		GL11.glTexImage2D(GL11.GL_TEXTURE_2D, (int)0, GL30.GL_DEPTH24_STENCIL8, framebufferWidth, framebufferHeight, (int)0, GL30.GL_DEPTH_STENCIL,  GL30.GL_UNSIGNED_INT_24_8, (ByteBuffer)null);
+				GL30.glFramebufferTexture2D(GL30.GL_FRAMEBUFFER, GL30.GL_DEPTH_STENCIL_ATTACHMENT, GL11.GL_TEXTURE_2D, depthBuffer, (int)0);
             }
 
             this.framebufferClear();
@@ -137,6 +202,7 @@
             GlStateManager.bindTexture(0);
         }
     }
+    
 
     public void checkFramebufferComplete()
     {
@@ -175,6 +241,13 @@
         }
     }
 
+	/** MINECRIFT */
+    public void genMipMaps()
+    {
+        GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);    // TODO: Minecrift - Check GLContext capabilities
+    }
+	/** END MINECRIFT */
+    
     public void unbindFramebufferTexture()
     {
         if (OpenGlHelper.isFramebufferEnabled())
@@ -214,10 +287,15 @@
 
     public void framebufferRender(int width, int height)
     {
-        this.framebufferRenderExt(width, height, true);
+        this.framebufferRenderExt(0,width, height,0, true);
     }
 
-    public void framebufferRenderExt(int width, int height, boolean p_178038_3_)
+    public void framebufferRenderExt(int width, int height, boolean noblend)
+    {
+        this.framebufferRenderExt(0,width, height,0, noblend);
+    }
+    
+    public void framebufferRenderExt(int left, int width, int height, int top, boolean disableBlend)
     {
         if (OpenGlHelper.isFramebufferEnabled())
         {
@@ -230,12 +308,12 @@
             GlStateManager.matrixMode(5888);
             GlStateManager.loadIdentity();
             GlStateManager.translate(0.0F, 0.0F, -2000.0F);
-            GlStateManager.viewport(0, 0, width, height);
+            GlStateManager.viewport(left, top, width, height);
             GlStateManager.enableTexture2D();
             GlStateManager.disableLighting();
             GlStateManager.disableAlpha();
 
-            if (p_178038_3_)
+            if (disableBlend)
             {
                 GlStateManager.disableBlend();
                 GlStateManager.enableColorMaterial();
@@ -276,4 +354,28 @@
         GlStateManager.clear(i);
         this.unbindFramebuffer();
     }
+    
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder();
+        sb.append("\n");
+        if (name != null) sb.append("Name:   " + name).append("\n");
+        sb.append("Size:   " + framebufferWidth + " x " + framebufferHeight).append("\n");
+        sb.append("FB ID:  " + framebufferObject).append("\n");
+        sb.append("Tex ID: " + framebufferTexture).append("\n");
+        return sb.toString();
+    }
+    
+    
+    //Forge Support
+    public boolean isStencilEnabled(){
+    	return true;
+    }
+    
+    public boolean enableStencil()
+    {
+        return true;
+    }
+    
+    
 }
