--- a/net/minecraft/client/network/NetHandlerPlayClient.java
+++ b/net/minecraft/client/network/NetHandlerPlayClient.java
@@ -5,6 +5,11 @@
 import com.google.common.util.concurrent.FutureCallback;
 import com.google.common.util.concurrent.Futures;
 import com.mojang.authlib.GameProfile;
+import com.mtbs3d.minecrift.api.NetworkHelper;
+import com.mtbs3d.minecrift.api.NetworkHelper.PacketDiscriminators;
+import com.mtbs3d.minecrift.provider.OpenVRPlayer;
+import com.mtbs3d.minecrift.render.PlayerModelController;
+
 import io.netty.buffer.Unpooled;
 import java.io.File;
 import java.io.IOException;
@@ -243,6 +248,8 @@
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.storage.MapData;
+
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -294,6 +301,12 @@
         this.guiScreenServer = p_i46300_2_;
         this.netManager = networkManagerIn;
         this.profile = profileIn;
+        
+        //VIVECRAFT
+        NetworkHelper.serverAllowsClimbey =false;
+        NetworkHelper.serverWantsData = false;
+        NetworkHelper.serverSupportsDirectTeleport = false;
+        //
     }
 
     /**
@@ -323,6 +336,17 @@
         this.gameController.playerController.setGameType(packetIn.getGameType());
         this.gameController.gameSettings.sendSettingsToServer();
         this.netManager.sendPacket(new CPacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName())));
+        
+        // VIVE START - ask server if it's running this mod
+        this.gameController.vrPlayer.setFreeMoveMode(true);
+        byte[] version = Minecraft.getMinecraft().minecriftVerString.getBytes(Charsets.UTF_8);
+        String s = "Vivecraft";
+        PacketBuffer pb = new PacketBuffer(Unpooled.buffer());
+		pb.writeBytes(s.getBytes());
+        this.netManager.sendPacket(new CPacketCustomPayload("REGISTER", pb ));
+        this.netManager.sendPacket(new CPacketCustomPayload("MC|Vive|Version", (new PacketBuffer(Unpooled.buffer())).writeString(Minecraft.getMinecraft().minecriftVerString)));
+        this.netManager.sendPacket(NetworkHelper.getVivecraftClientPacket(PacketDiscriminators.VERSION, version));
+        // VIVE END - ask server if it's running this mod
     }
 
     /**
@@ -850,6 +874,10 @@
     public void handleDisconnect(SPacketDisconnect packetIn)
     {
         this.netManager.closeChannel(packetIn.getReason());
+        // VIVE START - no longer on a vanilla server, reset restricted state
+    	this.gameController.vrPlayer.noTeleportClient = true;
+        OpenVRPlayer.get().setFreeMoveMode(true);
+        // VIVE END - no longer on a vanilla server, reset restricted state
     }
 
     /**
@@ -926,8 +954,24 @@
         }
         else
         {
-            this.gameController.ingameGUI.getChatGUI().printChatMessage(packetIn.getChatComponent());
-        }
+        	boolean nochat = false;
+            ITextComponent t = packetIn.getChatComponent();
+//            if(t instanceof TextComponentTranslation){
+//            	TextComponentTranslation tt = (TextComponentTranslation) t;
+            	//vive its a nice thought but unrelable on non-vanilla
+//            	if(tt.getKey() == "commands.tp.success.coordinates"){
+//            		Minecraft.getMinecraft().vrPlayer.doTeleportCallback();
+//            		nochat = true;
+//            	}
+//            }
+            
+            if(!nochat)this.gameController.ingameGUI.getChatGUI().printChatMessage(t);
+        	
+
+        }
+        
+       
+        
     }
 
     /**
@@ -2008,6 +2052,56 @@
             String s1 = packetbuffer3.readString(256);
             this.gameController.getSoundHandler().stop(s1, SoundCategory.getByName(s));
         }
+        // VIVE START - server told us that it has this mod too, allow extended reach, etc.
+        else if ("MC|ViveOK".equals(packetIn.getChannelName()))
+        { //allowed, set to user preference.
+        	this.gameController.vrPlayer.noTeleportClient = false;
+            this.gameController.vrPlayer.setFreeMoveMode(Minecraft.getMinecraft().vrSettings.vrFreeMove);
+        } 
+        else if ("Vivecraft".equals(packetIn.getChannelName()))
+        { 
+        	PacketBuffer packetbuffer = packetIn.getBufferData(); 	
+        	PacketDiscriminators dis = PacketDiscriminators.values()[packetbuffer.readByte()];
+          			
+        	switch (dis){
+        	case VERSION:
+        		String v = packetbuffer.readString(1024);
+        		this.gameController.vrPlayer.noTeleportClient = false;
+        		this.gameController.vrPlayer.setFreeMoveMode(Minecraft.getMinecraft().vrSettings.vrFreeMove);
+        		this.gameController.printChatMessage("Vivecraft server mod detected: " + v);
+        		break;
+        	case REQUESTDATA:
+        		NetworkHelper.serverWantsData = true;
+        		break;
+        	case CLIMBING:
+        		NetworkHelper.serverAllowsClimbey = true;
+        		break;
+        	case TELEPORT:
+        		NetworkHelper.serverSupportsDirectTeleport = true;
+        		break;
+        	case UBERPACKET:
+        		Long hi = packetbuffer.readLong();
+        		Long low = packetbuffer.readLong();
+        		byte[] hmd = packetbuffer.readBytes(29).array();
+        		byte[] c0 = packetbuffer.readBytes(29).array();       		
+        		byte[] c1 = packetbuffer.readBytes(29).array();
+		
+        		UUID u = new UUID(hi, low);
+        		
+        		PlayerModelController.getInstance().Update(u, hmd, c0, c1);    		
+        		break;
+        	default:
+        		break;
+        	}
+
+        	packetbuffer.release();
+        }
+        else if ("REGISTER".equals(packetIn.getChannelName())){
+        	PacketBuffer packetbuffer = packetIn.getBufferData(); 
+        	String v = new String(packetbuffer.array(),Charsets.UTF_8);
+        	System.out.println("REGISTER " + v );
+        }
+        // VIVE END
     }
 
     /**
