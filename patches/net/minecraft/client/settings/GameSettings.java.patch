--- a/net/minecraft/client/settings/GameSettings.java
+++ b/net/minecraft/client/settings/GameSettings.java
@@ -103,7 +103,7 @@
     public float chatOpacity = 1.0F;
     public boolean snooperEnabled = true;
     public boolean fullScreen;
-    public boolean enableVsync = true;
+    public boolean enableVsync = false;
     public boolean useVbo = true;
     public boolean reducedDebugInfo;
     public boolean hideServerAddress;
@@ -213,7 +213,7 @@
     public boolean ofStars = true;
     public boolean ofSunMoon = true;
     public int ofVignette = 0;
-    public int ofChunkUpdates = 1;
+    public int ofChunkUpdates = 5;
     public boolean ofChunkUpdatesDynamic = false;
     public int ofTime = 0;
     public boolean ofClearWater = false;
@@ -413,7 +413,7 @@
                 this.mc.getTextureMapBlocks().setMipmapLevels(this.mipmapLevels);
                 this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
                 this.mc.getTextureMapBlocks().setBlurMipmapDirect(false, this.mipmapLevels > 0);
-                this.mc.scheduleResourcesRefresh();
+                this.needsResourceRefresh = true; // FORGE: fix for MC-64581 very laggy mipmap slider
             }
         }
 
@@ -1102,19 +1102,25 @@
 
                     for (KeyBinding keybinding : this.keyBindings)
                     {
-                        if (s1.equals("key_" + keybinding.getKeyDescription()))
-                        {
-                            if (Reflector.KeyModifier_valueFromString.exists() && s2.indexOf(58) != -1)
-                            {
-                                String[] astring = s2.split(":");
-                                Object object = Reflector.call(Reflector.KeyModifier_valueFromString, new Object[] {astring[1]});
-                                Reflector.call(keybinding, Reflector.ForgeKeyBinding_setKeyModifierAndCode, new Object[] {object, Integer.valueOf(Integer.parseInt(astring[0]))});
-                            }
-                            else
-                            {
-                                keybinding.setKeyCode(Integer.parseInt(s2));
-                            }
-                        }
+                    	if (s1.equals("key_" + keybinding.getKeyDescription()))
+                    	{
+                    		//FORGE
+                    		if (Reflector.forgeExists()){
+                    			if(s2.indexOf(':') != -1)
+                    			{
+                    				String[] astring = s2.split(":");
+                    				Object object = Reflector.call(Reflector.KeyModifier_valueFromString, new Object[] {astring[1]});
+                    				Reflector.call(keybinding, Reflector.ForgeKeyBinding_setKeyModifierAndCode, new Object[] {object, Integer.valueOf(Integer.parseInt(astring[0]))});
+                    			}
+                    			else
+                    			{
+                    				Reflector.call(keybinding, Reflector.ForgeKeyBinding_setKeyModifierAndCode, new Object[] {Reflector.getFieldValue(Reflector.KeyModifier_NONE), Integer.valueOf(Integer.parseInt(s2))});
+                    			}
+                    		}else{
+                    			keybinding.setKeyCode(Integer.parseInt(s2));
+                    		}
+                    		//
+                    	}
                     }
 
                     for (SoundCategory soundcategory : SoundCategory.values())
@@ -1181,9 +1187,9 @@
     {
         if (Reflector.FMLClientHandler.exists())
         {
-            Object object = Reflector.call(Reflector.FMLClientHandler_instance, new Object[0]);
+            Object object = Reflector.call(Reflector.FMLClientHandler_instance);
 
-            if (object != null && Reflector.callBoolean(object, Reflector.FMLClientHandler_isLoading, new Object[0]))
+            if (object != null && Reflector.callBoolean(object, Reflector.FMLClientHandler_isLoading))
             {
                 return;
             }
@@ -1267,7 +1273,7 @@
                 if (Reflector.ForgeKeyBinding_getKeyModifier.exists())
                 {
                     String s = "key_" + keybinding.getKeyDescription() + ":" + keybinding.getKeyCode();
-                    Object object1 = Reflector.call(keybinding, Reflector.ForgeKeyBinding_getKeyModifier, new Object[0]);
+                    Object object1 = Reflector.call(keybinding, Reflector.ForgeKeyBinding_getKeyModifier);
                     Object object2 = Reflector.getFieldValue(Reflector.KeyModifier_NONE);
                     printwriter.println(object1 != object2 ? s + ":" + object1 : s);
                 }
@@ -1781,7 +1787,7 @@
         {
             ++this.ofChunkUpdates;
 
-            if (this.ofChunkUpdates > 5)
+            if (this.ofChunkUpdates > 15)
             {
                 this.ofChunkUpdates = 1;
             }
@@ -1885,18 +1891,18 @@
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_RENDER)
         {
-            if (!this.ofFastRender && Config.isShaders())
-            {
-                Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
-                return;
-            }
+//            if (!this.ofFastRender && Config.isShaders())
+//            {
+//                Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
+//                return;
+//            }
 
             this.ofFastRender = !this.ofFastRender;
 
-            if (this.ofFastRender)
-            {
-                this.mc.entityRenderer.stopUseShader();
-            }
+//            if (this.ofFastRender)
+//            {
+//                this.mc.entityRenderer.stopUseShader();
+//            }
 
             Config.updateFramebufferSize();
         }
@@ -2696,7 +2702,7 @@
                     if (astring[0].equals("ofChunkUpdates") && astring.length >= 2)
                     {
                         this.ofChunkUpdates = Integer.valueOf(astring[1]).intValue();
-                        this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 5);
+                        this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 15);
                     }
 
                     if (astring[0].equals("ofChunkUpdatesDynamic") && astring.length >= 2)
@@ -2986,7 +2992,7 @@
         this.guiScale = 0;
         this.particleSetting = 0;
         this.heldItemTooltips = true;
-        this.useVbo = false;
+        this.useVbo = true;
         this.forceUnicodeFont = false;
         this.ofFogType = 1;
         this.ofFogStart = 0.8F;
@@ -2997,7 +3003,7 @@
         this.ofSmoothWorld = Config.isSingleProcessor();
         this.ofLazyChunkLoading = Config.isSingleProcessor();
         this.ofFastMath = false;
-        this.ofFastRender = false;
+        this.ofFastRender = true;
         this.ofTranslucentBlocks = 0;
         this.ofDynamicFov = true;
         this.ofAlternateBlocks = true;
@@ -3021,7 +3027,7 @@
         this.ofStars = true;
         this.ofSunMoon = true;
         this.ofVignette = 0;
-        this.ofChunkUpdates = 1;
+        this.ofChunkUpdates = 5;
         this.ofChunkUpdatesDynamic = false;
         this.ofTime = 0;
         this.ofClearWater = false;
@@ -3166,6 +3172,7 @@
         }
     }
 
+    //FORGE
     public void onGuiClosed()
     {
         if (this.needsResourceRefresh)
@@ -3174,6 +3181,7 @@
             this.needsResourceRefresh = false;
         }
     }
+    ////
 
     public static enum Options
     {
