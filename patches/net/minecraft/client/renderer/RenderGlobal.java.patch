--- a/net/minecraft/client/renderer/RenderGlobal.java
+++ b/net/minecraft/client/renderer/RenderGlobal.java
@@ -4,7 +4,9 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.gson.JsonSyntaxException;
+
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+
 import java.io.IOException;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -19,7 +21,9 @@
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
+
 import javax.annotation.Nullable;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.block.BlockEnderChest;
@@ -104,11 +108,13 @@
 import net.minecraft.world.border.WorldBorder;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.util.vector.Vector3f;
 import org.lwjgl.util.vector.Vector4f;
+
 import shadersmod.client.Shaders;
 import shadersmod.client.ShadersRender;
 
@@ -200,7 +206,7 @@
     public Set chunksToResortTransparency = new LinkedHashSet();
     public Set chunksToUpdateForced = new LinkedHashSet();
     private Deque visibilityDeque = new ArrayDeque();
-    private List<ContainerLocalRenderInformation> renderInfosEntities = new ArrayList(1024);
+    private List<ContainerLocalRenderInformation> renderInfosEntities = new ArrayList<ContainerLocalRenderInformation>(1024);
     private List<ContainerLocalRenderInformation> renderInfosTileEntities = new ArrayList(1024);
     private List renderInfosNormal = new ArrayList(1024);
     private List renderInfosEntitiesNormal = new ArrayList(1024);
@@ -391,7 +397,7 @@
         }
     }
 
-    private void renderSky(VertexBuffer worldRendererIn, float posY, boolean reverseX)
+    public void renderSky(VertexBuffer worldRendererIn, float posY, boolean reverseX)
     {
         int i = 64;
         int j = 6;
@@ -454,7 +460,7 @@
         }
     }
 
-    private void renderStars(VertexBuffer worldRendererIn)
+    public void renderStars(VertexBuffer worldRendererIn)
     {
         Random random = new Random(10842L);
         worldRendererIn.begin(7, DefaultVertexFormats.POSITION);
@@ -748,6 +754,8 @@
                             {
                                 boolean flag3 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
 
+                                flag3 =false; //VIVE -wat is this.
+                                
                                 if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag3) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.world.isBlockLoaded(blockpos$pooledmutableblockpos.setPos(entity2))))
                                 {
                                     ++this.countEntitiesRendered;
@@ -1111,10 +1119,12 @@
         }
 
         this.mc.mcProfiler.endStartSection("culling");
-        BlockPos blockpos1 = new BlockPos(d3, d4 + (double)viewEntity.getEyeHeight(), d5);
+        //VIVE NO EYEHEIGHT
+        BlockPos blockpos1 = new BlockPos(d3, d4, d5);
         RenderChunk renderchunk = this.viewFrustum.getRenderChunk(blockpos1);
         new BlockPos(MathHelper.floor(d3 / 16.0D) * 16, MathHelper.floor(d4 / 16.0D) * 16, MathHelper.floor(d5 / 16.0D) * 16);
-        this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || viewEntity.posX != this.lastViewEntityX || viewEntity.posY != this.lastViewEntityY || viewEntity.posZ != this.lastViewEntityZ || (double)viewEntity.rotationPitch != this.lastViewEntityPitch || (double)viewEntity.rotationYaw != this.lastViewEntityYaw;
+        // VIVE FIX CULLING ISSUES WITH MIRROR
+        this.displayListEntitiesDirty = true; //this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || viewEntity.posX != this.lastViewEntityX || viewEntity.posY != this.lastViewEntityY || viewEntity.posZ != this.lastViewEntityZ || (double)viewEntity.rotationPitch != this.lastViewEntityPitch || (double)viewEntity.rotationYaw != this.lastViewEntityYaw;
         this.lastViewEntityX = viewEntity.posX;
         this.lastViewEntityY = viewEntity.posY;
         this.lastViewEntityZ = viewEntity.posZ;
@@ -1199,8 +1209,11 @@
 
                 if (set1.size() == 1)
                 {
-                    Vector3f vector3f = this.getViewVector(viewEntity, partialTicks);
-                    EnumFacing enumfacing = EnumFacing.getFacingFromVector(vector3f.x, vector3f.y, vector3f.z).getOpposite();
+                	//VIVE
+                    //Vector3f vector3f = this.getViewVector(viewEntity, partialTicks);
+                	Vec3d dir = Minecraft.getMinecraft().roomScale.getHMDDir_World(); 
+                    EnumFacing enumfacing = EnumFacing.getFacingFromVector((float)dir.xCoord, (float)dir.yCoord, (float)dir.zCoord).getOpposite();
+                    //VIVE END
                     set1.remove(enumfacing);
                 }
 
@@ -1443,22 +1456,22 @@
         }
     }
 
-    protected Vector3f getViewVector(Entity entityIn, double partialTicks)
-    {
-        float f = (float)((double)entityIn.prevRotationPitch + (double)(entityIn.rotationPitch - entityIn.prevRotationPitch) * partialTicks);
-        float f1 = (float)((double)entityIn.prevRotationYaw + (double)(entityIn.rotationYaw - entityIn.prevRotationYaw) * partialTicks);
-
-        if (Minecraft.getMinecraft().gameSettings.thirdPersonView == 2)
-        {
-            f += 180.0F;
-        }
-
-        float f2 = MathHelper.cos(-f1 * 0.017453292F - (float)Math.PI);
-        float f3 = MathHelper.sin(-f1 * 0.017453292F - (float)Math.PI);
-        float f4 = -MathHelper.cos(-f * 0.017453292F);
-        float f5 = MathHelper.sin(-f * 0.017453292F);
-        return new Vector3f(f3 * f4, f5, f2 * f4);
-    }
+//    protected Vector3f getViewVector(Entity entityIn, double partialTicks)
+//    {
+//        float f = (float)((double)entityIn.prevRotationPitch + (double)(entityIn.rotationPitch - entityIn.prevRotationPitch) * partialTicks);
+//        float f1 = (float)((double)entityIn.prevRotationYaw + (double)(entityIn.rotationYaw - entityIn.prevRotationYaw) * partialTicks);
+//
+//        if (Minecraft.getMinecraft().gameSettings.thirdPersonView == 2)
+//        {
+//            f += 180.0F;
+//        }
+//
+//        float f2 = MathHelper.cos(-f1 * 0.017453292F - (float)Math.PI);
+//        float f3 = MathHelper.sin(-f1 * 0.017453292F - (float)Math.PI);
+//        float f4 = -MathHelper.cos(-f * 0.017453292F);
+//        float f5 = MathHelper.sin(-f * 0.017453292F);
+//        return new Vector3f(f3 * f4, f5, f2 * f4);
+//    }
 
     public int renderBlockLayer(BlockRenderLayer blockLayerIn, double partialTicks, int pass, Entity entityIn)
     {
@@ -1722,9 +1735,9 @@
         else if (this.mc.world.provider.isSurfaceWorld())
         {
             GlStateManager.disableTexture2D();
-            boolean flag = Config.isShaders();
+            boolean shadersmod = Config.isShaders();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.disableTexture2D();
             }
@@ -1732,7 +1745,7 @@
             Vec3d vec3d = this.world.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
             vec3d = CustomColors.getSkyColor(vec3d, this.mc.world, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.setSkyColor(vec3d);
             }
@@ -1757,14 +1770,14 @@
             GlStateManager.depthMask(false);
             GlStateManager.enableFog();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.enableFog();
             }
 
             GlStateManager.color(f, f1, f2);
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.preSkyList();
             }
@@ -1788,7 +1801,7 @@
 
             GlStateManager.disableFog();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.disableFog();
             }
@@ -1803,7 +1816,7 @@
             {
                 GlStateManager.disableTexture2D();
 
-                if (flag)
+                if (shadersmod)
                 {
                     Shaders.disableTexture2D();
                 }
@@ -1846,7 +1859,7 @@
 
             GlStateManager.enableTexture2D();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.enableTexture2D();
             }
@@ -1858,14 +1871,14 @@
             GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
             CustomSky.renderSky(this.world, this.renderEngine, this.world.getCelestialAngle(partialTicks), f15);
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.preCelestialRotate();
             }
 
             GlStateManager.rotate(this.world.getCelestialAngle(partialTicks) * 360.0F, 1.0F, 0.0F, 0.0F);
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.postCelestialRotate();
             }
@@ -1905,7 +1918,7 @@
 
             GlStateManager.disableTexture2D();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.disableTexture2D();
             }
@@ -1936,7 +1949,7 @@
             GlStateManager.enableAlpha();
             GlStateManager.enableFog();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.enableFog();
             }
@@ -1944,7 +1957,7 @@
             GlStateManager.popMatrix();
             GlStateManager.disableTexture2D();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.disableTexture2D();
             }
@@ -2024,7 +2037,7 @@
             GlStateManager.popMatrix();
             GlStateManager.enableTexture2D();
 
-            if (flag)
+            if (shadersmod)
             {
                 Shaders.enableTexture2D();
             }
