--- a/shadersmod/client/Shaders.java
+++ b/shadersmod/client/Shaders.java
@@ -192,7 +192,7 @@
     static int usedShadowDepthBuffers = 0;
     static int usedColorAttachs = 0;
     static int usedDrawBuffers = 0;
-    static int dfb = 0;
+    public static int dfb = 0;
     static int sfb = 0;
     private static int[] gbuffersFormat = new int[8];
     public static int activeProgram = 0;
@@ -353,7 +353,7 @@
     static final FloatBuffer tempMatrixDirectBuffer = nextFloatBuffer(16);
     static final FloatBuffer tempDirectFloatBuffer = nextFloatBuffer(16);
     static final IntBuffer dfbColorTextures = nextIntBuffer(16);
-    static final IntBuffer dfbDepthTextures = nextIntBuffer(3);
+    public static final IntBuffer dfbDepthTextures = nextIntBuffer(3);
     static final IntBuffer sfbColorTextures = nextIntBuffer(8);
     static final IntBuffer sfbDepthTextures = nextIntBuffer(2);
     static final IntBuffer dfbDrawBuffers = nextIntBuffer(8);
@@ -691,11 +691,11 @@
             flag2 = true;
         }
 
-        if (Config.isFastRender())
-        {
-            SMCLog.info("Shaders can not be loaded, Fast Render is enabled.");
-            flag2 = true;
-        }
+//        if (Config.isFastRender())
+//        {
+//            SMCLog.info("Shaders can not be loaded, Fast Render is enabled.");
+//            flag2 = true;
+//        }
 
         String s = shadersConfig.getProperty(EnumShaderOption.SHADER_PACK.getPropertyKey(), packNameDefault);
 
@@ -1245,11 +1245,10 @@
         SMCLog.info(stringbuilder.toString());
     }
 
-    public static void startup(Minecraft mc)
+    public static void startup(Minecraft mcin)
     {
         checkShadersModInstalled();
-        mc = mc;
-        mc = Minecraft.getMinecraft();
+        mc = mcin;
         capabilities = GLContext.getCapabilities();
         glVersionString = GL11.glGetString(GL11.GL_VERSION);
         glVendorString = GL11.glGetString(GL11.GL_VENDOR);
@@ -2937,8 +2936,8 @@
 
     private static void resize()
     {
-        renderDisplayWidth = mc.displayWidth;
-        renderDisplayHeight = mc.displayHeight;
+        renderDisplayWidth = mc.displayFBWidth;
+        renderDisplayHeight = mc.displayFBHeight;
         renderWidth = Math.round((float)renderDisplayWidth * configRenderResMul);
         renderHeight = Math.round((float)renderDisplayHeight * configRenderResMul);
         setupFrameBuffer();
@@ -2979,10 +2978,18 @@
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL14.GL_DEPTH_TEXTURE_MODE, GL11.GL_LUMINANCE);
-            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, renderWidth, renderHeight, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, (FloatBuffer)((FloatBuffer)null));
+            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL30.GL_DEPTH24_STENCIL8, renderWidth, renderHeight, 0, GL30.GL_DEPTH_STENCIL, GL30.GL_UNSIGNED_INT_24_8, (FloatBuffer)(null));
         }
+        
+        dfbDepthTextures.position(0);
+        GlStateManager.bindTexture(0);
+        EXTFramebufferObject.glFramebufferTexture2DEXT(GL30.GL_FRAMEBUFFER, GL30.GL_DEPTH_STENCIL_ATTACHMENT, GL11.GL_TEXTURE_2D, dfbDepthTextures.get(0), 0);
+
+		int ok = GL30.glCheckFramebufferStatus(GL30.GL_FRAMEBUFFER);
+		System.out.println("hack stencil into SMC " + dfb  + " " +ok);
+		mc.checkGLError("hack smc stencil");
+        //VIVECRAFT ADD STENCIL
 
-        EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, dfbDepthTextures.get(0), 0);
         GL20.glDrawBuffers(dfbDrawBuffers);
         GL11.glReadBuffer(0);
         checkGLError("FT d");
@@ -3143,7 +3150,7 @@
             }
         }
 
-        if (mc.displayWidth != renderDisplayWidth || mc.displayHeight != renderDisplayHeight)
+        if (mc.displayFBWidth != renderDisplayWidth || mc.displayFBHeight != renderDisplayHeight)
         {
             resize();
         }
@@ -3186,8 +3193,9 @@
         float f2 = (float)Math.exp(Math.log(0.5D) * (double)f1 / (double)eyeBrightnessHalflife);
         eyeBrightnessFadeX = eyeBrightnessFadeX * f2 + (float)(eyeBrightness & 65535) * (1.0F - f2);
         eyeBrightnessFadeY = eyeBrightnessFadeY * f2 + (float)(eyeBrightness >> 16) * (1.0F - f2);
-        isEyeInWater = mc.gameSettings.thirdPersonView == 0 && !isSleeping && mc.player.isInsideOfMaterial(Material.WATER) ? 1 : 0;
-        Vec3d vec3d = mc.world.getSkyColor(mc.getRenderViewEntity(), partialTicks);
+        //VIVE use my method its better.
+        isEyeInWater = mc.gameSettings.thirdPersonView == 0 && !isSleeping && mc.getItemRenderer().isInsideOfMaterial(mc.entityRenderer.getEyeRenderPos(mc.currentPass),Material.WATER) ? 1 : 0;
+        Vec3d vec3d = mc.world.getSkyColor(entity, partialTicks);
         skyColorR = (float)vec3d.xCoord;
         skyColorG = (float)vec3d.yCoord;
         skyColorB = (float)vec3d.zCoord;
@@ -3286,16 +3294,15 @@
         checkGLError("end beginRender");
     }
 
-    private static void checkWorldChanged(World worldin)
+    private static void checkWorldChanged(World world)
     {
-        if (currentWorld != worldin)
+        if (currentWorld != world)
         {
-            currentWorld = worldin;
-
-            if (currentWorld != null && worldin != null)
+ 
+            if (world != null && currentWorld != null)
             {
-                int i = worldin.provider.getDimensionType().getId();
-                int j = worldin.provider.getDimensionType().getId();
+                int i = world.provider.getDimensionType().getId();
+                int j = currentWorld.provider.getDimensionType().getId();
                 boolean flag = shaderPackDimensions.contains(Integer.valueOf(i));
                 boolean flag1 = shaderPackDimensions.contains(Integer.valueOf(j));
 
@@ -3304,6 +3311,7 @@
                     uninit();
                 }
             }
+            currentWorld = world;
         }
     }
 
@@ -3368,7 +3376,7 @@
         {
             checkGLError("shadow clear pre");
             EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, sfbDepthTextures.get(0), 0);
-            GL11.glClearColor(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.clearColor(1.0F, 1.0F, 1.0F, 1.0F);
             GL20.glDrawBuffers(programsDrawBuffers[30]);
             checkFramebufferStatus("shadow clear");
             GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
@@ -3378,16 +3386,16 @@
         {
             checkGLError("clear pre");
             GL20.glDrawBuffers(36064);
-            GL11.glClear(16384);
+            GlStateManager.clear(16384);
             GL20.glDrawBuffers(36065);
-            GL11.glClearColor(1.0F, 1.0F, 1.0F, 1.0F);
-            GL11.glClear(16384);
+            GlStateManager.clearColor(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.clear(16384);
 
             for (int i = 2; i < usedColorBuffers; ++i)
             {
                 GL20.glDrawBuffers(36064 + i);
-                GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
-                GL11.glClear(16384);
+                GlStateManager.clearColor(0.0F, 0.0F, 0.0F, 0.0F);
+                GlStateManager.clear(16384);
             }
 
             setDrawBuffers(dfbDrawBuffers);
@@ -3567,7 +3575,7 @@
 
     public static void drawComposite()
     {
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GL11.glBegin(GL11.GL_QUADS);
         GL11.glTexCoord2f(0.0F, 0.0F);
         GL11.glVertex3f(0.0F, 0.0F, 0.0F);
@@ -3591,7 +3599,7 @@
             GL11.glPushMatrix();
             GL11.glLoadIdentity();
             GL11.glOrtho(0.0D, 1.0D, 0.0D, 1.0D, 0.0D, 1.0D);
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             GlStateManager.enableTexture2D();
             GlStateManager.disableAlpha();
             GlStateManager.disableBlend();
@@ -3695,7 +3703,7 @@
             isRenderingDfb = false;
             mc.getFramebuffer().bindFramebuffer(true);
             OpenGlHelper.glFramebufferTexture2D(OpenGlHelper.GL_FRAMEBUFFER, OpenGlHelper.GL_COLOR_ATTACHMENT0, 3553, mc.getFramebuffer().framebufferTexture, 0);
-            GL11.glViewport(0, 0, mc.displayWidth, mc.displayHeight);
+            GL11.glViewport(0, 0, mc.displayFBWidth, mc.displayFBHeight);
 
             if (EntityRenderer.anaglyphEnable)
             {
@@ -3704,9 +3712,9 @@
             }
 
             GlStateManager.depthMask(true);
-            GL11.glClearColor(clearColorR, clearColorG, clearColorB, 1.0F);
-            GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.clearColor(clearColorR, clearColorG, clearColorB, 1.0F);
+            GlStateManager.clear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
+            GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             GlStateManager.enableTexture2D();
             GlStateManager.disableAlpha();
             GlStateManager.disableBlend();
@@ -3825,9 +3833,9 @@
     public static void preSkyList()
     {
         setUpPosition();
-        GL11.glColor3f(fogColorR, fogColorG, fogColorB);
+        GlStateManager.color(fogColorR, fogColorG, fogColorB);
         drawHorizon();
-        GL11.glColor3f(skyColorR, skyColorG, skyColorB);
+        GlStateManager.color(skyColorR, skyColorG, skyColorB);
     }
 
     public static void endSky()
@@ -4161,7 +4169,8 @@
     public static void endFPOverlay()
     {
     }
-
+    
+//unused
     public static void glEnableWrapper(int cap)
     {
         GL11.glEnable(cap);
@@ -4176,6 +4185,7 @@
         }
     }
 
+    //unused
     public static void glDisableWrapper(int cap)
     {
         GL11.glDisable(cap);
@@ -4429,7 +4439,7 @@
 
                         for (Object s7 : properties.keySet())
                         {
-                        	String s4 = (String) s7;
+                        	String s4 = (String)s7;
                             String s5 = properties.getProperty(s4);
                             shaderPackResources.put(s4, s5);
                         }
